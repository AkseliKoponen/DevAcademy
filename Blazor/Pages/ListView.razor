@page "/listView"
<style>
	.toggleOff {
border: 2px solid black;
  background-color: white;
border-color: #e7e7e7;
  color: black;
  padding: 14px 28px;
  font-size: 16px;
  cursor: pointer;
}
.toggleOff:hover{
	background: #e7e7e7
}	
.toggleOn {
border: 2px solid black;
  background-color: #e7e7e7;
	border-color: #e7e7e7;
  color: black;
  padding: 14px 40px;
  font-size: 16px;
  cursor: pointer;
}
.toggleOn:hover{
	background: white
}
.search{
border: 1px;
background-color: white;
color:black;
}
.search:hover{
	background: #e7e7e7
}
h3{
	color: #05173D;

}
</style>


<PageTitle>HSL City Bike Stations</PageTitle>
<p>
<h3>
Viewing <b>bike @db.table.ToLower()</b> @GetPageString() (of @db.matchCount total).
@if (db == DBManager.stations)
{
	<button @onclick="()=>ChangeTable()" class="toggleOff">View Trips</button>
}
else
{
	<button @onclick="()=>ChangeTable()" class="toggleOff">View Stations</button>
}
</h3>
</p>

@if (displayedTrips == null && displayedStations == null)
{
		<p><em>Loading...</em></p>
}
else
{
		<p>
		@if (currentPage > 0)
		{
					<button @onclick="()=>ChangePage(-1)">Previous Page</button>
		}
		else
		{
					<button type="button" disabled>Previous Page</button>
		}

		@if (isLastPage())
		{
			<button type="button" disabled>Next Page</button>
		}
		else
		{
			<button @onclick="()=>ChangePage(1)">Next Page</button>
		}

		</p>


	<table class="table">


			<thead>
			<tr>
				@if (buttonNames.Count >= 4)
				{
					for(int i = 0; i < buttonNames.Count; i++)
					{
						int ii = i;
						if (orderIndex != ii)
						{
							<th><button class="toggleOff" @onclick="()=>OrderBy(ii)">@buttonNames[ii]</button></th>
						}
						else
						{
							<th><button class="toggleOn" @onclick="()=>OrderBy(ii)"><b>@buttonNames[ii]</b></button></th>
						}
					}

				}
			</tr>
			<tr>
				@for (int i = 0; i < filters.Count; i++)
				{
					int ii = i;
						<td>
						<input type="text" @bind="filters[ii]" placeholder="Filter..."/>

									<button class="search" @onclick='()=>SetSearch(ii)'>
							@if (IsNumberField(ii))
							{
								<Tooltip Text="On number columns you can filter by >5 for example or <=21.52.">
												<i class="oi oi-magnifying-glass"></i>
												</Tooltip>
							}
							else
							{
								<Tooltip Text="Search with an empty filter field to clear previous filters.">
								<i class="oi oi-magnifying-glass"></i>
								</Tooltip>
							}
							</button>

					</td>
				}
					
			</tr>
			</thead>
			<tbody>
				@if (db == DBManager.trips)
				{
					@foreach (Trip trip in displayedTrips)
					{
						<tr>
							<td>@trip.deptStationName</td>
							<td>@trip.retStationName</td>
							<td>@trip.GetDistanceKm()</td>
							<td>@trip.GetDurationMin()</td>
						</tr>
					}

				}
				else
				{
					foreach (Station station in displayedStations)
					{
						<tr>
							@foreach (string str in station.GetListData())
							{
								<td>@str</td>
							}
						</tr>
					}
				}
			</tbody>
		</table>
		
}

@code {
	DBManager db = DBManager.stations;
	List<string> filters = new List<string> { "", "", "", "" };
	private List<Trip>? displayedTrips;
	private List<Station>? displayedStations;
	private int currentPage = 0;
	private int pageDisplayCount = 15;
	List<string> buttonNames = new List<string> { "Departure Station", "Return Station", "Distance (km)", "Duration (min)" };

	protected override async Task OnInitializedAsync()
	{
		DefaultSettings();
	}
	void DefaultSettings()
	{
		filters = new List<string> { "", "", "", "" };
		db = DBManager.currentTable;
		db.ResetFilters();
		ChangePage(-currentPage);
		DefaultButtonNames();
	}
	void ChangeTable()
	{
		DBManager.SetTable(db == DBManager.stations);
		DefaultSettings();
	}
	bool IsNumberField(int index)
	{
		return (db == DBManager.trips && index > 2) || (db == DBManager.stations && (index == 0 || index == 3));
	}
	void SetSearch(int index)
	{
		string column = db == DBManager.trips ? Trip.GetColumns(false)[index] : Station.GetColumnNames(false)[index];
		string criteria = filters[index];
		string str = "";
		if (criteria.Length == 0 || !IsNumberField(index))
		{

			str = column + " LIKE '%" + criteria + "%'";
		}
		else
		{
			if (criteria.Length == 0)
				return;
			criteria = System.Text.RegularExpressions.Regex.Replace(criteria, @"s", "");
			Console.WriteLine(criteria);
			int indexOfNumber = -1;
			for (int i = 0; i < criteria.Length; i++)
			{

				if (char.IsNumber(criteria.ToCharArray()[i]))
				{
					indexOfNumber = i;
					break;
				}
			}
			if (indexOfNumber == -1)
				return;
			float number;
			if (float.TryParse(criteria.Substring(indexOfNumber), out number) == false)
				return;
			if (column == "distance")
				number *= 1000;
			else if (column == "duration")
				number *= 60;
			string operatr = indexOfNumber > 0 ? criteria.Substring(0, indexOfNumber) : "=";
			str = column + " " + operatr + number;
		}
		db.AddWhere(str);
		UpdateEntries();

	}
	void UpdateEntries()
	{
		if (db == DBManager.trips)
			displayedTrips = DBManager.LoadTrips();
		else if (db == DBManager.stations)
			displayedStations = DBManager.LoadStations();
	}

	void ChangePage(int i)
	{
		currentPage = Math.Clamp(i + currentPage, 0, 1000);
		db.Limit(pageDisplayCount, currentPage);
		UpdateEntries();
	}
	void DefaultButtonNames()
	{

		buttonNames = db == DBManager.trips ? Trip.GetColumns() : Station.GetColumnNames();
	}
	bool isLastPage()
	{
		return (currentPage + 1) * pageDisplayCount >= db.matchCount;
	}
	string GetPageString()
	{
		return ((currentPage * pageDisplayCount) + 1) + " - " + (Math.Clamp(((currentPage + 1) * pageDisplayCount),0,db.matchCount));
	}
	void Clear()
	{
		db.OrderBy(null);
		orderIndex = -1;
		DefaultButtonNames();
	}
	int orderIndex = -1;
	void OrderBy(int index)
	{
		ChangePage(-currentPage);
		displayedTrips = new List<Trip>();
		displayedStations = new List<Station>();
		DefaultButtonNames();
		List<string> order = new List<string> {db==DBManager.stations?Station.GetColumnNames(false)[index]:Trip.GetColumns(false)[index]};
		bool desc = db.OrderBy(order);
		char c = desc ? '↓' : '↑';
		buttonNames[index] = c + " " + buttonNames[index] + " " + c;
		UpdateEntries();
	}

}