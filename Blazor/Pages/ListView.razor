@page "/listView"
@inject NavigationManager NavManager
<style>
	.stationCell{
		border: none;
  background-color: white;
  color: black;
  font-size: 16px;
  cursor: pointer;
	}
	.toggleOff {
border: 2px solid black;
  background-color: white;
border-color: #e7e7e7;
  color: black;
  padding: 14px 28px;
  font-size: 16px;
  cursor: pointer;
}
.toggleOff:hover{
	background: #e7e7e7
}	
.toggleOn {
border: 2px solid black;
  background-color: #e7e7e7;
	border-color: #e7e7e7;
  color: black;
  padding: 14px 40px;
  font-size: 16px;
  cursor: pointer;
}
.toggleOn:hover{
	background: white
}
.search{
border: 1px;
background-color: white;
color:black;
}
.search:hover{
	background: #e7e7e7
}
h3{
	color: #05173D;

}
</style>


<PageTitle>HSL City Bike Stations</PageTitle>
<p>
<h3>
Viewing <b>bike @db.table.ToLower()</b> @GetPageString() (of @db.matchCount.ToString("###,#") total).
		@if (db == DBManager.stations)
		{
		<button @onclick="()=>ChangeTable()" class="toggleOff">View Trips</button>
		}
		else
		{
		<button @onclick="()=>ChangeTable()" class="toggleOff">View Stations</button>
		}
</h3>
</p>

@if (loading)
{
			<p><em>Loading...</em></p>
			<div class="spinner"></div>
}
else
{
			<p>
		@if (currentPage > 0)
		{
							<button @onclick="()=>ChangePage(-1)">Previous Page</button>
		}
		else
		{
							<button type="button" disabled>Previous Page</button>
		}

		@if (isLastPage())
		{
					<button type="button" disabled>Next Page</button>
		}
		else
		{
					<button @onclick="()=>ChangePage(1)">Next Page</button>
		}

			</p>


		<table class="table">


				<thead>
				<tr>
				@if (buttonNames.Count >= 4)
				{
					for (int i = 0; i < buttonNames.Count; i++)
					{
						int ii = i;
						if (orderIndex != ii)
						{
												<th><button class="toggleOff" @onclick="()=>OrderBy(ii)">
												<Tooltip Text="Click to order the entries by this column">
										@buttonNames[ii]
												</Tooltip>
												</button></th>
						}
						else
						{
															<th><button class="toggleOn" @onclick="()=>OrderBy(ii)"><Tooltip Text="Click to order the entries by this column">
										@buttonNames[ii]
																</Tooltip></button></th>
						}
					}

				}
				</tr>
				<tr>
					<form action="Search()"></form>
				@for (int i = 0; i < filters.Count; i++)
				{
					int ii = i;
								<td>
									<input type="text" @bind="filters[ii]" placeholder="Filter..."/>
									<button class="search" @onclick='()=>SetSearch(ii)'>
							@if (IsNumberField(ii))
							{
											<Tooltip Text="On number columns you can filter by >5 for example or <=21.52.">
															<i class="oi oi-magnifying-glass"></i>
															</Tooltip>
							}
							else
							{
											<Tooltip Text="Search with an empty filter field to clear previous filters.">
											<i class="oi oi-magnifying-glass"></i>
											</Tooltip>
							}
									</button>

							</td>
				}

				</tr>
				</thead>
				<tbody>
			@if (db == DBManager.trips)
			{
				@foreach (Trip trip in displayedTrips)
				{
									<tr>
										<td>@trip.deptStationName</td>
										<td>@trip.retStationName</td>
										<td>@trip.GetDistanceKm()</td>
										<td>@trip.GetDurationMin()</td>
									</tr>
				}

			}
			else
			{
				foreach (Station station in displayedStations)
				{
					Station stat = station;
									<tr>			
						@foreach (string str in stat.GetListData())
						{
												<td><button class="stationCell" @onclick='()=>StationInfo(stat)'>
									@str
												</button></td>
						}
									</tr>
				}
			}
				</tbody>
			</table>

}

@code {
	DBManager db = DBManager.stations;
	List<string> filters = new List<string> { "", "", "", "" };
	bool loading = false;
	private List<Trip>? displayedTrips;
	private List<Station>? displayedStations;
	private int currentPage = 0;
	private int pageDisplayCount = 15;
	List<string> buttonNames = new List<string> { "Departure Station", "Return Station", "Distance (km)", "Duration (min)" };
	int orderIndex = -1;

	/// <summary>
	/// Open <paramref name="station"/> in StationView page.
	/// </summary>
	void StationInfo(Station station)
	{
		StationView.fid = station.fid;
		NavManager.NavigateTo("/stationView");
	}

	protected override async Task OnInitializedAsync()
	{
		DefaultSettings();
	}

	/// <summary>
	/// Remove filters and order and assing default button names
	/// </summary>
	void DefaultSettings()
	{
		filters = new List<string> { "", "", "", "" };
		db = DBManager.currentTable;
		db.ResetFilters();
		ChangePage(-currentPage);
		DefaultButtonNames();
	}

	/// <summary>
	/// Change the table from station to trips or vice versa
	/// </summary>
	void ChangeTable()
	{
		DBManager.ToggleTable(db == DBManager.stations);
		DefaultSettings();
	}

	/// <summary>
	/// True if the field of <paramref name="index"/> is a number field.
	/// <br> False if it is a text field.</br>
	/// </summary>
	bool IsNumberField(int index)
	{
		return (db == DBManager.trips && index >= 2) || (db == DBManager.stations && (index == 0 || index == 3));
	}

	/// <summary>
	/// Filters the database entries.
	/// </summary>
	/// <param name="index">Which column to search</param>
	void SetSearch(int index)
	{
		string column = db == DBManager.trips ? Trip.GetColumns(false)[index] : Station.GetColumnNames(false)[index];
		string criteria = filters[index];
		string str = "";
		if (criteria.Length == 0 || !IsNumberField(index))
		{

			str = column + " LIKE '%" + criteria + "%'";
		}
		else
		{
			//Handle number columns
			if (criteria.Length == 0)
				return;
			criteria = System.Text.RegularExpressions.Regex.Replace(criteria, @"s", "");
			Console.WriteLine(criteria);
			int indexOfNumber = -1;
			for (int i = 0; i < criteria.Length; i++)
			{

				if (char.IsNumber(criteria.ToCharArray()[i]))
				{
					indexOfNumber = i;
					break;
				}
			}
			if (indexOfNumber == -1)
				return;
			float number;
			if (float.TryParse(criteria.Substring(indexOfNumber), out number) == false)
				return;
			if (column == "distance")
				number *= 1000; //Distance is shown in kilometers but the data is in meters.
			else if (column == "duration")
				number *= 60;   //Duration is shown in minutes but the data is in seconds
			string operatr = indexOfNumber > 0 ? criteria.Substring(0, indexOfNumber) : "=";
			str = column + " " + operatr + number;
		}
		db.AddWhere(str);
		UpdateEntries();

	}
	/// <summary>
	/// Loads new entries to displayedTrips or -Stations
	/// </summary>
	async void UpdateEntries()
	{
		loading = true;
		if (db == DBManager.trips)
			await Task.Run(()=>displayedTrips = DBManager.LoadTrips());
		else if (db == DBManager.stations)
			await Task.Run(()=>displayedStations = DBManager.LoadStations());
		loading = false;
		StateHasChanged();
	}

	/// <summary>
	/// Changes page and loads new entries to displayedTrips or -Stations
	/// </summary>
	/// <param name="i">-1 to go to previous page. +1 to go to next Page.</param>
	void ChangePage(int i)
	{
		currentPage = Math.Clamp(i + currentPage, 0, 1000);
		db.Limit(pageDisplayCount, currentPage);
		UpdateEntries();
	}
	/// <summary>
	/// Reset the buttonNames to defaults
	/// </summary>
	void DefaultButtonNames()
	{

		buttonNames = db == DBManager.trips ? Trip.GetColumns() : Station.GetColumnNames();
	}
	/// <summary>
	/// Whether one is currently viewing the final page
	/// </summary>
	bool isLastPage()
	{
		return (currentPage + 1) * pageDisplayCount >= db.matchCount;
	}
	/// <summary>
	/// Returns a string of which entries are currently viewed
	/// <br>For example "30 - 45"</br>
	/// </summary>
	string GetPageString()
	{
		return ((currentPage * pageDisplayCount) + 1) + " - " + (Math.Clamp(((currentPage + 1) * pageDisplayCount), 0, db.matchCount));
	}

	/// <summary>
	/// Orders the database entries in a specific order
	/// </summary>
	/// <param name="columnIndex">Which column to order by</param>
	void OrderBy(int columnIndex)
	{
		ChangePage(-currentPage);
		displayedTrips = new List<Trip>();
		displayedStations = new List<Station>();
		DefaultButtonNames();
		List<string> order = new List<string> { db == DBManager.stations ? Station.GetColumnNames(false)[columnIndex] : Trip.GetColumns(false)[columnIndex] };
		bool desc = db.OrderBy(order);
		char c = desc ? '↓' : '↑';
		buttonNames[columnIndex] = c + " " + buttonNames[columnIndex] + " " + c;
		UpdateEntries();
	}

}